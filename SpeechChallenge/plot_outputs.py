"""Plots the output log information from the CNN.
"""

import matplotlib.pyplot as plt
import numpy as np
import re
import argparse

FLAGS = None

def read_file(log_file):
    """Read the lines of the file and processes the contents into numerical values.

    Parameters
    ----------
    log_file : the file containing output log information from the CNN. The
        contents of the file are assumed to have the following format:
        - The file contains loss values and accuracies of the network as well
          as the training step at which these values were recorded.
        - Accuracies: accuracy: <float> training step: <int>
        - Losses: train_loss: <float> training step: <int>

    Returns
    -------
    A dictionary with keys "train_loss" and "accuracy", Each with values as lists.
    train_loss : A list of tuples. The first element of the tuple is the training
        step of the logged loss value, and the second is the loss value logged.
    accuracy : A list of tuples. The first element of the tuple is the training
        step of the logged accuracy, and the second is the loss value logged.
    """
    with open(log_file, 'r') as f:
        lines = f.readlines()

    sub_chars = ['\n', ':', ',']
    lines = map(lambda x: re.sub('|'.join(sub_chars), '', x), lines)

    train_loss = []
    accuracy = []
    data = {'train_loss': [], 'validation_loss': [], 'accuracy': [], 'train_accuracy': []}

    for line in lines:
        elements = line.split(' ')
        data[elements[0]].append((int(elements[3]), float(elements[1])))
    return data

def plot_data(data):
    """Plots the losses and accuracies of the CNN.

    Parameters
    ----------
    data : a dictionary generated by read_file.
    """
    data['train_loss'].sort(key=lambda tup: tup[0])
    data['validation_loss'].sort(key=lambda tup: tup[0])
    data['accuracy'].sort(key=lambda tup: tup[0])
    data['train_accuracy'].sort(key=lambda tup: tup[0])

    t_loss_x = np.array([loss[0] for loss in data['train_loss']])
    t_loss_y = np.array([loss[1] for loss in data['train_loss']])

    t_acc_x = np.array([acc[0] for acc in data['train_accuracy']])
    t_acc_y = np.array([acc[1] for acc in data['train_accuracy']])

    v_loss_x = np.array([loss[0] for loss in data['validation_loss']])
    v_loss_y = np.array([loss[1] for loss in data['validation_loss']])

    acc_x = np.array([acc[0] for acc in data['accuracy']])
    acc_y = np.array([acc[1] for acc in data['accuracy']])

    plt.subplot(2, 1, 1)
    t_losses = plt.plot(t_loss_x, t_loss_y, 'b')
    v_losses = plt.plot(v_loss_x, v_loss_y, 'r')
    plt.setp(t_losses, label='training losses')
    plt.setp(v_losses, label='validation losses')
    plt.xlabel('Training steps')
    plt.ylabel('Loss value')
    plt.legend()

    plt.subplot(2, 1, 2)
    accuracies = plt.plot(acc_x, acc_y, 'g')
    train_accuracies = plt.plot(t_acc_x, t_acc_y, 'k')
    plt.setp(accuracies, label='validation accuracies')
    plt.setp(train_accuracies, label='training accuracies')
    plt.xlabel('Training steps')
    plt.ylabel('Accuracy percentage')
    plt.legend()
    plt.show()

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--log_file_path', type=str, default='cnn_output_logs/cnn_output.txt',
            help='The path to the output file to plot')
    FLAGS, unparsed = parser.parse_known_args()
    data = read_file(FLAGS.log_file_path)
    plot_data(data)
